"""
Django settings for booking_fp project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
# Для чтения переменной окружения в settings.py из .env:
from environ import Env
# Для работы блока логирования проекта:
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Чтение переменной окружения в settings.py:
env = Env()
Env.read_env(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)     # default=False - выполняется только если в .env НИЧЕГО НЕТ про Дебаг.


# -----------------------------------------------------------------------------------------------------------------
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])
# — превращает строку 127.0.0.1,localhost в список ['127.0.0.1', 'localhost']. 8000 - PORT.
# ALLOWED_HOSTS = []         # Разрешает все хосты (НЕ использовать в продакшн)

# Для устранения ОШИБКИ из-за НЕбезопасности POST-запросов, включая формы в админке (см. .env):
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])
# -----------------------------------------------------------------------------------------------------------------



# Application definition

INSTALLED_APPS = [
    # Для подключения Админки:
    'django.contrib.admin',
    # Пакет расширений для Python. Например, чтобы выгрузить список всех URL-эндпоинтов проекта в файл:
    'django_extensions',

    # _____ Default packages ___________________
    # Пакеты, которые были установлены по умолчанию при создании проекта Django:
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # _____ Frameworks _________________________
    # djangorestframework:
    'rest_framework',
    # Authentication:
    'rest_framework.authtoken',
    # Authentication JWT:
    'rest_framework_simplejwt',
    # Authentication JWT - blacklist:
    'rest_framework_simplejwt.token_blacklist',
    # Filters:
    'django_filters',
    # _____ My apps ____________________________
    'apps.users.apps.UsersConfig',
    'apps.offers.apps.OffersConfig',
    'apps.addresses.apps.AddressesConfig',
    'apps.bookings.apps.BookingsConfig',
    'apps.reviews.apps.ReviewsConfig',
    'utils',
    # ____ Подключение Swagger и ReDoc _________
    'drf_spectacular',
    'drf_spectacular_sidecar',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # ____ For applications - middleware:
    'booking_fp.middleware.JWTAuthenticationMiddleware',
]

ROOT_URLCONF = 'booking_fp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'booking_fp.wsgi.application'


# _____ Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if env.bool('MYSQL', default=True):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),     # , default="127.0.0.1"
            'PORT': env('DB_PORT'),     # , default="3306"
        },
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# %%%%%%%%%%%%%%%%%%%%%%%%%%%%   ADDITIONAL   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# _____ Pagination. Swagger and Redoc. Filtering. JWTAuthentication. Permissions:
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.BrowsableAPIRenderer',  # ← этот класс - при GET видно хоть что-то в браузере (но всё равно без формы — просто интерфейс с описанием).
            'rest_framework.renderers.JSONRenderer',
        ],
    # ----------------------------------------------------------------
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,  # Теперь по умолчанию на всех страницах будет 5 элементов.
    # Swagger and Redoc:
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # Подключение фильтрации:
    'DEFAULT_FILTER_BACKENDS': [
            "django_filters.rest_framework.DjangoFilterBackend"
        ],
    # ----------------------------------------------------------------
    # Basic Authentication:
    'DEFAULT_AUTHENTICATION_CLASSES': [
    'rest_framework_simplejwt.authentication.JWTAuthentication',
        ],
    # Permissions:
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # ----------------------------------------------------------------
}


# _____ JWT-аутентификация, Basic Authentication:
SIMPLE_JWT = {
    # Время жизни access токена (короткое):
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    # Время жизни refresh токена (длинное):
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),
    # Можно добавить и другие настройки, например, для токенов одноразового использования.

    # Включаем ротацию refresh токенов для повышения безопасности:
    'ROTATE_REFRESH_TOKENS': True,
    # Добавляем старый refresh токен в черный список после его использования:
    'BLACKLIST_AFTER_ROTATION': True,
    # Указываем тип заголовка авторизации:
    'AUTH_HEADER_TYPES': ('Bearer',),
}


# _____ Подключение Swagger и ReDoc
# http://drf-spectacular.readthedocs.io/en/latest/settings.html
SPECTACULAR_SETTINGS = {
    'TITLE': 'Task Manager API',
    'DESCRIPTION': 'API для управления задачами и подзадачами',
    'VERSION': '1.0.0',
}

SPECTACULAR_DEFAULTS = {
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],  # Permissions for schema UI views
    # 'SERVE_AUTHENTICATION': None,  # Authentication class for schema UI views; None to use DRF default
}


# _____ Логирования работы включенного сервера:
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    # Из примера Бандыло - filters (для чего нужен - НЕ понятно):
    'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            }
        },

    'handlers': {
        'console': {  # Логирование сервера в консоль
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },

        'http_file': {  # Логирование HTTP-запросов
            'level': 'DEBUG',
            # 'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'http_logs.log'),    # http_logs.log - Файл для логов
            'formatter': 'verbose',
        },

        'db_file': {  # Логирование SQL-запросов
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'db_logs.log'),
            'formatter': 'verbose',
        },
    },

    'loggers': {
        'django': {  # Основные логи Django, в консоль
            'handlers': ['console', 'http_file'],       # Куда выводить и записывать логи.
            'level': 'INFO',
        },

        'django.server': {  # Сервер (runserver)
            'handlers': ['console', 'http_file'],       # Куда выводить и записывать логи.
            'level': 'INFO',
            'propagate': False,
        },

        'django.request': {  # HTTP-запросы
            'handlers': ['http_file'],       # Куда выводить и записывать логи.
            'level': 'DEBUG',
            # 'level': 'INFO',
            'propagate': False,
        },

        'django.db.backends': {  # SQL-запросы
            'handlers': ['db_file'],     # Куда отправлять логи. Пока закомментирую эту опцию - 'console',
            'level': 'DEBUG',            # Уровень логирования.
            'propagate': False,
        },
    }
}


# Настройка параметров электронной почты:
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'    # email выводится в консоль
EMAIL_HOST_USER = 'noreply@taskmanager.local'                       # От кого отправлять письма
